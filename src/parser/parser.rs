use clap::Error;
use super::ast::{Stmt, Expr};
use crate::lexer::{Token, TokenType};

pub struct Parser {
    /// Vector of tokens generated by Lexer
    tokens: Vec<Token>,
    /// Current position in the token vector
    current: usize,
}

impl Parser {
    pub fn new(tokens: Vec<Token>) -> Self {
        Self {
            tokens,
            current: 0,
        }
    }

    pub fn parse(&mut self) -> Result<Stmt, ParseError> {
        let program = self.statement()?;
        Ok(program)
    }

    fn function(&mut self) -> Result<Stmt, ParseError> {
        // Consume int
        self.consume(TokenType::Int, ParseError::ExpectedType)?;
        // Get identifier
        let identifier = self.consume_return(TokenType::Identifier, ParseError::ExpectedIdentifier)?;
        let name = match identifier.lexeme {
            None => {return Err(ParseError::ExpectedIdentifier)}
            Some(name) => {name}
        };
        let name_expr = Box::new(Expr::Identifier {value: name});
        // Consume left paren
        self.consume(TokenType::LeftParen, ParseError::ExpectedLeftParen)?;
        // Consume void
        self.consume(TokenType::Void, ParseError::InvalidParams)?;
        // Consume right paren
        self.consume(TokenType::RightParen, ParseError::UnmatchedParen)?;
        // Consume left bracket
        self.consume(TokenType::LeftBrace, ParseError::ExpectedLeftBrace)?;
        // Parse statement
        let body = Box::new(self.statement()?);
        // Consume right bracket
        Ok(Stmt::FuncDef {
            name:name_expr, body,
        })
    }

    fn statement(&mut self) -> Result<Stmt, ParseError> {
        // Consume return
        let expression = self.expression()?;
        Ok(expression)
    }

    fn expression(&mut self) -> Result<Stmt, ParseError> {
        // Parse int (only current expression)
        let int = self.int()?;
        Ok(Expr::new_int())
    }

    fn int(&mut self) -> Result<Expr, ParseError> {}

    fn consume(&mut self, token_type: TokenType, error: ParseError) -> Result<(), ParseError> {
        if self.tokens[self.current].token_type == token_type {
            self.current += 1;
            Ok(())
        } else {
            Err(error)
        }
    }

    fn consume_return(&mut self, token_type: TokenType,
                      error: ParseError) -> Result<Token, ParseError> {
        let cur_token = self.tokens[self.current].clone();
        if cur_token.token_type != token_type {
            Err(error)
        } else {
            self.current += 1;
            Ok(cur_token)
        }
    }
}


pub enum ParseError {
    UnmatchedParen,
    UnmatchedBrace,
    ExpectedIdentifier,
    ExpectedSemicolon,
    ExpectedType,
    ExpectedLeftParen,
    ExpectedLeftBrace,
    InvalidParams,
}
